// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projekt_2.Context;

#nullable disable

namespace Projekt_2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250508183432_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Projekt_2.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Projekt_2.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<string>("QuestionType").HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Projekt_2.Models.TestAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<Guid>("TestQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("TestAnswers");
                });

            modelBuilder.Entity("Projekt_2.Models.TestQuestion", b =>
                {
                    b.HasBaseType("Projekt_2.Models.Question");

                    b.HasDiscriminator().HasValue("TestQuestion");
                });

            modelBuilder.Entity("Projekt_2.Models.TestMultiQuestion", b =>
                {
                    b.HasBaseType("Projekt_2.Models.TestQuestion");

                    b.HasDiscriminator().HasValue("TestMultiQuestion");
                });

            modelBuilder.Entity("Projekt_2.Models.TestOneQuestion", b =>
                {
                    b.HasBaseType("Projekt_2.Models.TestQuestion");

                    b.HasDiscriminator().HasValue("TestOneQuestion");
                });

            modelBuilder.Entity("Projekt_2.Models.Question", b =>
                {
                    b.HasOne("Projekt_2.Models.Project", "Project")
                        .WithMany("Questions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Projekt_2.Models.TestAnswer", b =>
                {
                    b.HasOne("Projekt_2.Models.TestQuestion", "TestQuestion")
                        .WithMany("TestAnswers")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("Projekt_2.Models.Project", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Projekt_2.Models.TestQuestion", b =>
                {
                    b.Navigation("TestAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
